# -*- coding: utf-8 -*-'''Batch exports all photos from an ArcGIS Online feature service (if attachments are enabled).The attachment table is limited in information and all attributes about the photos are in theoriginal featureclass of the project. In order to make this data useful during the export process, the featureclass attribute table needs to be made accessible via a pandasdata frame and accessed with a lookup of the associated GUID. R. RudolphChannel Islands National Parkrocky_rudolph@nps.gov5/16/2022'''import arcpyimport pandas as pdfrom os.path import join# from icecream import icimport redef strip_non_alphanum(string):    return re.sub('[^0-9a-zA-Z]+', '_', string)def msg(msg):        print(msg)        arcpy.AddMessage(msg)def arcgis_table_to_df(in_fc, input_fields=None, query=""):    """    Source credit: https://gist.github.com/d-wasserman/e9c98be1d0caebc2935afecf0ba239a0    Function will convert an arcgis table into a pandas dataframe with an object ID index, and the selected    input fields using an arcpy.da.SearchCursor.    :param - in_fc - input feature class or table to convert    :param - input_fields - fields to input to a da search cursor for retrieval    :param - query - sql query to grab appropriate values    :returns - pandas.DataFrame"""    OIDFieldName = arcpy.Describe(in_fc).OIDFieldName    if input_fields:        final_fields = [OIDFieldName] + input_fields    else:        final_fields = [field.name for field in arcpy.ListFields(in_fc)]    data = [row for row in arcpy.da.SearchCursor(in_fc,final_fields,where_clause=query)]    fc_dataframe = pd.DataFrame(data,columns=final_fields)    fc_dataframe = fc_dataframe.set_index(OIDFieldName,drop=True)    return fc_dataframedef fc_data_lookup(df, guid_, field_name):    # Look up the desired data using the global ID.    return df.loc[df['GlobalID'] == guid_][field_name].values[0]def generate_file_name(field_list, fc_df, rel_global_id):    if field_list:        return_name = []        for val in field_list:            # fc_data_lookup(fc_df, rel_global_id, 'Common_Name')            return_name.append(f"{val}-{fc_data_lookup(fc_df, rel_global_id,val)}")        return strip_non_alphanum("-".join(return_name))    else:        return ""class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Export Attachments"        self.alias = "Export Attachments"        # List of tool classes associated with this toolbox        self.tools = [ExportAttachments]class ExportAttachments(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "ExportAttachments"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # fc = r'C:\GIS\Projects\Eucalyptus\CHIS_Eucalyptus_and_Ornamentals_E18C6367A57F4B02BAC96CC81C72068C.geodatabase\main.CHIS_Eucalpytus'        # attachment_table = r'C:\GIS\Projects\Eucalyptus\CHIS_Eucalyptus_and_Ornamentals_E18C6367A57F4B02BAC96CC81C72068C.geodatabase\main.CHIS_Eucalpytus__ATTACH'        # output_dir = r"C:\GIS\Projects\Eucalyptus\photos"        param0 = arcpy.Parameter(        displayName="Main Featureclass",        name="fc",        datatype="DEFeatureClass",        parameterType="Required",        direction="Input")        param1 = arcpy.Parameter(        displayName="Attachment Table",        name="attachment_table",        datatype="DETable",        parameterType="Required",        direction="Input")        param2 = arcpy.Parameter(        displayName="Output Directory",        name="output_dir",        datatype="DEFolder",        parameterType="Required",        direction="Input")        param3 = arcpy.Parameter(        displayName="Field List",        name="field_list",        datatype="GPString",        parameterType="Optional",        direction="Input",        multiValue=True)        param3.filter.type="ValueList"        params = [param0, param1, param2, param3]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        def get_fields(fc):            return_fields = [f.name for f in arcpy.ListFields(fc)]            return return_fields        if parameters[0].altered:            parameters[3].filter.list = get_fields(parameters[0].valueAsText)        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        fc = parameters[0].valueAsText        if parameters[3].valueAsText:            field_list = parameters[3].valueAsText.split(";")        else:            field_list = ""        attachment_table = parameters[1].valueAsText        output_dir = parameters[2].valueAsText        # msg(type(fc))        # msg(type(field_list))        # msg(type(attachment_table))        # msg(type(output_dir))                fc_df = arcgis_table_to_df(fc)        msg(f"Fields chosen: {field_list}")        photo_count = arcpy.GetCount_management(attachment_table)[0]        with arcpy.da.SearchCursor(attachment_table, ['DATA', 'REL_GLOBALID', 'ATT_NAME', 'ATTACHMENTID']) as cursor:            for i, row in enumerate(cursor, start=1):                attachment = row[0]                rel_global_id = row[1]                attachment_name = row[2]                attachment_id = row[3]                filename = generate_file_name(field_list, fc_df, rel_global_id) + f"_{attachment_id}_{attachment_name}"                out_file = join(output_dir, filename)                msg(f"Exporting {out_file} {i} of {photo_count}")                with open(out_file, 'wb') as f:                    f.write(attachment.tobytes())        msg("Done.")        return